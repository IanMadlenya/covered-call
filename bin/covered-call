#!/usr/bin/env ruby

require File.expand_path(
    File.join(File.dirname(__FILE__), %w[.. lib covered-call]))
require 'net/http'
require 'rubygems'
require 'optiflag'
require 'nokogiri'

include CoveredCallCalcs
# Set up command line arguments

module CoveredCall extend OptiFlagSet
   flag "t" do
	description "The underlying equity's ticker" 
	alternate_forms "ticker"
   end
   optional_flag "e" do
	description "The expiration month [eg: 2010-02] default: next expiration" 
	value_matches ["Expiration date must be YYYY-MM", /^\d{4}\-\d{2}$/]
	alternate_forms "expiration"
   end
   optional_flag "f" do
	description "Format (csv,human) default: human"
	alternate_forms "format"
	value_in_set ['csv', 'human']
   end
   usage_flag "h", "help" 
   and_process!
end

format = ARGV.flags[:f]
format ||= "human"
ticker = ARGV.flags[:t] 
expiry = ARGV.flags[:e] 

# Determine if we are already past this month's expiration
if Date.today < third_friday_of("#{Date.today.year}-#{Date.today.month}") then
   expiry ||= "#{Date.today.year}-#{Date.today.month}"
elsif Date.today.month == 12 then
   expiry ||= "#{Date.today.year + 1}-01"
else
   expiry ||= "#{Date.today.year}-#{Date.today.month + 1}"
end

url = "http://finance.yahoo.com/q/op?s=" + ticker
if not expiry.nil? then
    url += "&m=" + expiry 
end

# Get the current yahoo options page
data = Net::HTTP.get_response(URI.parse(url)).body

# Read the XML document
doc = Nokogiri::HTML(data)

#Current price is the first bolded number on the page
current_price = doc.xpath('//b/span')[0].text

ticker = Ticker.new(ticker, current_price)

tables = data.scan(/\<table.*\<\/table>/)

doc.xpath('//tr[count(td) = 8]').each do |option_data|
   strike = option_data.elements[0].text
   option_label = option_data.elements[1].text
   last = option_data.elements[2].text
   bid = option_data.elements[4].text
   ask = option_data.elements[5].text
   volume = option_data.elements[6].text
   # Parse the label to determine if this is a put or a call
   option_label =~ /.*?\d([CP])\d.*/
   if $1 == 'C' then
    ticker.add_call_option(strike, last, bid, ask, volume)
   elsif $1 == 'P' then
    ticker.add_put_option(strike, last, bid, ask, volume)
   else
    puts "Error consuming option ticker!"
   end
end 
    
covered_calls = if "human" == format then ticker.chain_human(days_til_expiry(expiry)) else ticker.chain_csv(days_til_expiry(expiry)) end

#print the csv header if needed
if "csv" == format then 
	puts "Symbol,Strike,Option Price, Option Sale,Option Sale %, Stock Sale Gain, Stock Sale Gain %, Total Gain, Total Gain %"
else
	puts "Current Price: #{current_price}"
	puts "Days until expiration: #{days_til_expiry(expiry)}"
end

covered_calls.each do |covered_call|
	puts covered_call
end 
