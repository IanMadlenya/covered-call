#!/usr/bin/env ruby

require File.expand_path(
    File.join(File.dirname(__FILE__), %w[.. lib covered-call]))
require 'net/http'
require 'rubygems'
require 'optiflag'

include CoveredCallCalcs
# Set up command line arguments

module CoveredCall extend OptiFlagSet
   flag "t" do
	description "The underlying equity's ticker" 
	alternate_forms "ticker"
   end
   optional_flag "e" do
	description "The expiration month [eg: 2010-02] default: next expiration" 
	value_matches ["Expiration date must be YYYY-MM", /^\d{4}\-\d{2}$/]
	alternate_forms "expiration"
   end
   optional_flag "f" do
	description "Format (csv,human) default: human"
	alternate_forms "format"
	value_in_set ['csv', 'human']
   end
   usage_flag "h", "help" 
   and_process!
end

format = ARGV.flags[:f]
format ||= "human"
ticker = ARGV.flags[:t] 
expiry = ARGV.flags[:e] 
expiry ||= "#{Date.today.year}-#{Date.today.month}"

url = "http://finance.yahoo.com/q/op?s=" + ticker
if not expiry.nil? then
    url += "&m=" + expiry 
end

# Get the current yahoo options page
data = Net::HTTP.get_response(URI.parse(url)).body

#Current price is the first bolded number on the page
current_price =  data.scan(/<b><span.*?>([\d\.]{3,})<\/span><\/b>/)[0][0]

ticker = Ticker.new(ticker, current_price)

tables = data.scan(/\<table.*\<\/table>/)

#Call Options
if(tables.length > 4) then
    tables[3].scan(/\<tr\>.*?\<\/tr\>/).each do |row|
        strike = last = bid = ask = volume = nil
        cells = row.scan(/\<td.*?\<\/td\>/)
        if(cells[0] =~ /k=([\d\.]*)/) then
            strike = $1
        end
        
        #Last
        if(cells[2] =~ />([\d\.]{3,})/) then
            last = $1
        end

        #Bid
        if(cells[4] =~ />([\d\.]{3,})/) then
            bid = $1
        end
        
        #Ask
        if(cells[5] =~ />([\d\.]{3,})/) then
            ask = $1
        end

        #Volume
        if(cells[6] =~ />([\d\,]{1,})/) then
            volume = $1
        end

        if(strike) then
            ticker.add_call_option(strike, last, bid, ask, volume)
        end
    end
end

#Puts
if(tables.length > 5) then
    tables[4].scan(/\<tr\>.*?\<\/tr\>/).each do |row|
        strike = last = bid = ask = volume = nil
        cells = row.scan(/\<td.*?\<\/td\>/)
        if(cells[0] =~ /k=([\d\.]*)/) then
            strike = $1
        end
        
        #Last
        if(cells[2] =~ />([\d\.]{3,})/) then
            last = $1
        end

        #Bid
        if(cells[4] =~ />([\d\.]{3,})/) then
            bid = $1
        end
        
        #Ask
        if(cells[5] =~ />([\d\.]{3,})/) then
            ask = $1
        end

        #Volume
        if(cells[6] =~ />([\d\,]{1,})/) then
            volume = $1
        end

        if(strike) then
            ticker.add_put_option(strike, last, bid, ask, volume)
        end
    end
end

covered_calls = if "human" == format then ticker.chain_human(days_til_expiry(expiry)) else ticker.chain_csv(days_til_expiry(expiry)) end


#print the csv header if needed
if "csv" == format then 
	puts "Symbol,Strike,Option Price, Option Sale,Option Sale %, Stock Sale Gain, Stock Sale Gain %, Total Gain, Total Gain %"
else
	puts "Current Price: #{current_price}"
	puts "Days until expiration: #{days_til_expiry(expiry)}"
end



covered_calls.each do |covered_call|
	puts covered_call
end 

